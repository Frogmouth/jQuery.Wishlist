{"name":"Jquery.wishlist","tagline":"A simple jquery plugin for manage a wishlist with cookies and without registration needed.","body":"<meta name=\"google-site-verification\" content=\"LjwH_RRnU2BTUo8aIsEN4BLFVw_E5eb8WWHz_XPp2r0\" />\r\n***\r\njQuery.Wishlist\r\n===============\r\n\r\nA simple jquery plugin for manage a wishlist with cookies and without registration needed.\r\n\r\n### Current Version: 1.3.2\r\n\r\nRequirements\r\n---------------------\r\n\r\n*Wishlist* needs some library for works 100%, in the future, we want to creating a light versione without these libs, but today for boost developing plug-in we need it.\r\n\r\n* [jQuery](http://jquery.com/ \"jQuery Home\") (> 1.8 raccomanded)\r\n* [Underscore JS](http://underscorejs.org/ \"Underscore Home\")\r\n* [Backbone JS](http://backbonejs.org/ \"Backbone Home\")\r\n* [JSON2](https://github.com/douglascrockford/JSON-js \"Json2 GitHub\")\r\n* [jCookies](https://github.com/carhartl/jquery-cookie \"jquery-cookie\")\r\n\r\nWhat can we do?\r\n---------------------\r\n\r\nWith *Wishlist* you can create a simple bar or button (or what you like) who save page's information into a cookie for create a simple wishlist (or reminder, or cart, ...).\r\nTo do that we use **localStorage** or **cookie** (if localstorage is disabled). It's an alternative to the registration, **a simple way to do a complex thing**.\r\n\r\n**Backbone**, why? Because it allows me to have some very useful tools for the development.\r\nCollections and models of Backbone allow to manipulate the information with smart and powerfull tools, like: filtering, ordering, ecc... and in the future it allows the possibility to integrate with a server side app.\r\n\r\nIt's a jQuery plugin only because it's friendly for more developer, rather that Backbone only, but in the future maybe we will use jQuery only for the View.\r\n\r\nQuick start:\r\n---\r\n\r\nCalls inside document ready `$.Wishlist(ID)` where `ID` is a unique string that represents the ID of your wishlist, in every page the ID must be the same to get the wishlist item.\r\n\r\n    $(function(){\r\n        window.MYwishlist = $.Wishlist(\"wishlist\");\r\n    });\r\n\r\n`MYwishlist.data` is the Backbone collection of your wished ITEM.\r\n\r\nDocumentation\r\n----------\r\n\r\n### Libs include needed\r\n\r\n\r\nFirst include in your `<head>` the script:\r\n\r\n    <script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-1.10.2.min.js\"></script>\r\n\t<script type=\"text/javascript\" src=\"http://underscorejs.org/underscore-min.js\"></script>\r\n\t<script type=\"text/javascript\" src=\"http://backbonejs.org/backbone-min.js\"></script>\r\n\t\r\n\t<!-- dowload and include local -->\r\n\t<script type=\"text/javascript\" src=\"/path/to/jquery.cookie.js\"></script>\r\n\t<script type=\"text/javascript\" src=\"/path/to/json2.js\"></script>\r\n\t\r\n\t<!-- lastone jquery Wishlist libs -->\r\n\t<script type=\"text/javascript\" src=\"/path/to/jquery_wish.js\"></script>`\r\n\r\nNow you can instance `$.wishlist(ID)`, `ID` is an unique alphanumeric String, the name of your wishlist: \r\n\r\n\t$(document).ready(function(){\r\n\t\t$.wishlist(\"Wishlist\");\r\n\t});\r\n\r\n### basic example of HTML\r\n\r\nA basic exaple to wishing an element by his ID:\r\n\r\n\t<!-- wish counter -->\r\n\t<a class=\"wishCounter\">0</a>\r\n\r\n\t<!-- clear wish list -->\r\n\t<a id=\"clearWish\" href=\"#!\">Clean Wishlist</a>\r\n\t\r\n\t<!-- wish ITEMS -->\r\n\t<div class=\"item wishItem\">\r\n\t\t<a class=\"wishAction addToWish\" data-title=\"Foo\" data-id=\"1\" href=\"#\">ADD Foo to wishlist</a>\r\n\t</div>\r\n\t<div class=\"item wishItem\">\r\n\t\t<a class=\"wishAction addToWish\" data-title=\"Fish\" data-id=\"2\" href=\"#\">ADD Fish to wishlist</a>\r\n\t</div>\r\n\t<div class=\"item wishItem\">\r\n\t\t<a class=\"wishAction addToWish\" data-title=\"Mug\" data-id=\"10\" href=\"#\">ADD Mug to wishlist</a>\r\n\t</div>\r\n\r\n\t<!-- wished list -->\r\n\t<div id=\"wishList\">\r\n\t</div>\r\n\t\r\nReferences\r\n---------\r\n\r\n + [$.whislist()](#wishlist)\r\n + [$.fn.wishBar()](#wishbar)\r\n + [$.fn.wishItem()](#wishitem)\r\n\r\n--- \r\n\r\n### Wishlist\r\n`$.whislist(ID [,options])`\r\n\r\n**Return** : [_object_] wishlist instance\t\r\n\r\n\t$.Wishlist(ID,{\r\n\t\t/* insert here properties and methods for override it */\r\n\t});\r\n\r\n- `ID` [**required**] : is an unique alpanumeric string, the name of wishlist\r\n\r\n- `options` [_optional_] : is an object that extend the default properties of wishlist and methods \r\n\r\n####Properties\r\n\r\n* ##### `useStorage` #####\r\n\r\n\t+   **Definition** : allows to force the use of localStorage instead Cookie\r\n\t+\t**Value** : true/false\r\n\t+   **Default** : `(typeof localStorage === \"undefined\") ? false : true`\r\n\r\n* ##### `storeID` #####\r\n\r\n\t+   **Definition** : allows to store the items ID inside a Cookie (useful if you need this information for backend)\r\n\t+\t**Value** : false/true\r\n\t+   **Default** : `(typeof localStorage === \"undefined\") ? false : true`\r\n\t+\t**See also**: [How wishlist communicates with the backend](#how-wishlist-communicates-with-the-backend)\r\n\r\n* #####`storegeName` #####\r\n\r\n\t+   **Definition** : allows you to force the name (ID) of your wishlist\r\n\t+   **Default** :  `ID` - ID passed like attribute of `$.wishlist()`\r\n\r\n* #####`setCookie` #####\r\n\r\n\t+   **Definition** : The property of cookie\r\n\t+   **Default** :  \r\n\t\t\t{\r\n\t\t\t\t\"name\" : ID, /*ID passed like attribute $.wishlist()*/\r\n\t\t\t\t\"expire\" : 365,\r\n\t\t\t\t\"path\" : \"/\"\r\n\t\t\t}\r\n\r\n* #####`BackboneModel` #####\r\n\r\n\t+   **Definition** : object that extends the Backbone model\r\n\t+   **Default** :  \r\n\t\t\t{\r\n\t\t\t\t\"defaults\" : {\r\n\t\t\t\t\tid : null,\r\n\t\t\t\t\ttitle : null,\r\n\t\t\t\t\timg : null\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n* #####`BackboneCollection` #####\r\n\r\n\t+   **Definition** : object that extends the Backbone collection, by default the attributes `model` of beckbone collection is the `BackboneModel`\r\n\t+   **Default** :  `{}`\r\n\t+\t**Important: `model` _property of this object will be overwritten_**\r\n\r\n* #####`useCustomElements` #####\r\n\r\n\t+   **Definition** : allow you to force the plugin to ignore the default elements rendered by wishlist\r\n\t+   **Default** :  `false`\r\n\r\n* #####`$wishBar` #####\r\n\r\n\t+   **Definition** : a jquery selector of a DOM element where render the list of wished item\r\n\t+   **Default** : `$(\".wishItem\")`\r\n\r\n* #####`$wishItem` #####\r\n\r\n\t+   **Definition** : a jquery selector of DOM elements that rapresents the elemen to wish\r\n\t+   **Default** : `$(\"#wishList\")`\r\n\r\n* #####`barOptions` #####\r\n\r\n\t+   **Definition** : an object that override the default option of wishlist bar\r\n\t+   **Default** :  `{}`\r\n\t+\t**REF** : [$.fn.wishBar()](#wishbar)\r\n\r\n* #####`itemOptions` #####\r\n\r\n\t+   **Definition** : an object that override the default option of wishlist items\r\n\t+   **Default** : `{}`\r\n\t+\t**REF** : [$.fn.wishItem()](#wishitem)\r\n\r\n\r\n* #####`counterClass` #####\r\n\r\n\t+   **Definition** : the name of the class where wishlist place the number of the elements inside the wishlist\r\n\t+   **Default** :  `\"wishCounter\"`\r\n\r\n* #####`clearId` #####\r\n\r\n\t+   **Definition** : id which bind for clear wishlist\r\n\t+   **Default** :  `\"clearWish\"`\r\n\r\n* #####`text` #####\r\n\r\n\t+   **Definition** : Testi di default\r\n\t+   **Default** :\r\n\t\t\t{\r\n\t\t\t\t\"noStorage\" : \"Enable Cookie, please\",\r\n\t\t\t\t\"add\" : \"Add \",\r\n\t\t\t\t\"remove\" : \"Remove \"\r\n\t\t\t}\r\n\r\n ####Methods\r\n\r\n\tThere are some local methods that allow to altering or extending the behavior of the plugin. By default all of this methods value is `null`, you can sat a function that override or extend the default behavior.\r\n\t    \r\n\t* ##### `onLoad()` #####\r\n\t\t+   **Definition** : invoked when the wishlist was loaded\r\n\t\t+   **Default** : `null`\r\n\t\t+\t**Context** : wishlist inscance\r\n\r\n\t* ##### `onClean` #####\r\n\t\t+   **Definition** : invoked when the wishlist was cleaning\r\n\t\t+   **Default** : `null`\r\n\t\t+\t**Context** : wishlist inscance\r\n\r\n\t* ##### `onChange(actionName,model,collection)` #####\r\n\t\t+   **Definition** : invoked when add or remove some element on wishlist\r\n\t\t+   **Default** : `null`\r\n\t\t+\t**Context** : wishlist inscance\r\n\t\t+\t**attributes** : \r\n\t\t\t* `actionName` : **[String]** `\"add\"` `\"remove\"`\r\n\t\t\t* `model` : **[Backbone model object]**\r\n\t\t\t* `collection` : **[Backbone Collection object]**\r\n\r\n--- \r\n\r\n### WishBar\r\n`$.fn.wishBar(WISHLIST [,options])`\r\n\t\r\n- `WISHLIST` [**required**] : is the Wishlist istance\r\n- `options` [_optional_] : is an object that extend the default properties and methods\r\n\r\n####Properties\r\n* #####`template`#####\r\n\r\n    +   **Definition** : underscore template uses for display the information\r\n\t+   **Default** :  `\"<div rel='\"+WISHLIST.ID+\"' id='wishItem_<%- id %>' class='wishedItem' data-id='<%- id %>'><img src='<%- img %>'><p><%- title %></p></div>\",`\r\n    \r\n####Method\r\n* ##### `addItemHtml` #####\r\n\t+   **Definition** : this function override the default method uses for generate and place the element inside of wishbar \r\n\t+\t**Attributes** :\r\n\t\t- `data` [object] the attributes of the model added to wishbar \r\n\r\n* ##### `removeItemHtml` #####\r\n\t+   **Definition** : this function override the default method to remove an element inside the wishbar\r\n\t+\t**Attributes** :\r\n\t\t- `id` [object] the id of the element to remove from wishbar \r\n\r\n--- \r\n\r\n### WishItem\r\n`$.fn.wishItem(WISHLIST [,options])`\r\n\t\r\n- `WISHLIST` [**required**] : is the Wishlist istance\r\n- `options` [_optional_] : is an object that extend the default properties and methods\r\n\t\r\n####Properties\r\n* #####`removeClass` #####\r\n\r\n\t+   **Definition** : class which bind the event for remove some elment to wishlist\r\n\t+   **Default** :  \"removeToWish\"\r\n\r\n* #####`addClass` #####\r\n\r\n\t+   **Definition** : class which bind the event for add some elment to wishlist\r\n\t+   **Default** :  `\"addToWish\"`\r\n\r\n* #####`triggerClass`#####\r\n\r\n\t+   **Definition** : class which bind all edit event\r\n\t+   **Default** :  `\"wishAction\"`\r\n\r\n* #####`triggerEvent`#####\r\n\r\n\t+   **Definition** : binded event type \r\n\t+   **Default** :  `\"click\"`\r\n\r\n* #####`sameButton`#####\r\n\r\n\t+   **Definition** : use same element to add and remove item from wishlist\r\n\t+   **Default** :  `true`\r\n\r\n####Method\r\n * ##### `picker(item)` #####\r\n\t+   **Definition** : this function override the default method to pick the data when click for \"ADD\" an element\r\n\t+   **Attributes** : \r\n\t\t- `item`: jquery object that rapresent the clicked element\r\n\r\n--- \r\n\r\nHow wishlist communicates with the backend\r\n---\r\n\r\nRight now, the only method to read the element inside wishlist of a user are the `Cookies`. Also with localStorage, Wishlist store the ids of the item inside a cookie callad `ID + \"_IDS\"` where `ID` is the string passed like attribute of `$.whislist`. If localStorge isn't enable in user browser the reference name (of the cookie) is only the `ID`.\r\n\r\nDone and To do list:\r\n---------------------\r\n\r\n**DONE:**\r\n\r\n- NEW 1.3 version (deep rebuild)\r\n- Implement **localStorage** as an alternative of COOKIE (using cookie only for send items id to backend)\r\n- a NEW Working example\r\n- wishlist bar\r\n- wishlist item\r\n\r\n**TO DO:**\r\n\r\n- Continue to Developed the Core Script\r\n- Exploit the possibilities of Backbone\r\n- Develop client management wisthlist (like item order, item prop, ecc...)\r\n- Crossbrowser bug fix (> IE8)\r\n- Dev other some **RedyToUse** exaples with graphics (CSS/HTML - button and bar)\r\n- Use some customs methods instead jquery Cookie to work with Cookie\r\n\r\n**Remote Dev**\r\n\r\n- Integrate the ability to communicate with a server ( _REST_ ) via Backbone","google":"UA-65451921-1","note":"Don't delete this file! It's used internally to help with page regeneration."}